openapi: 3.0.1
info:
  title: EDC REST API
  description: All files merged by open api merger
  license:
    name: Apache License v2.0
    url: http://apache.org/v2
  version: 1.0.0-SNAPSHOT
servers:
- url: /
paths:
  /identity-hub/collections:
    post:
      tags:
      - Identity Hub
      operationId: write
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /identity-hub/collections-commit:
    post:
      tags:
      - Identity Hub
      operationId: writeCommit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /identity-hub/query-commits:
    post:
      tags:
      - Identity Hub
      operationId: queryCommits
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /identity-hub/query-objects:
    post:
      tags:
      - Identity Hub
      operationId: queryObjects
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /callback/{processId}/deprovision:
    post:
      tags:
      - HTTP Provisioner Webhook
      operationId: callDeprovisionWebhook
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeprovisionedResource'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /callback/{processId}/provision:
    post:
      tags:
      - HTTP Provisioner Webhook
      operationId: callProvisionWebhook
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionerWebhookRequest'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /check/health:
    get:
      tags:
      - Application Observability
      operationId: checkHealth
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /check/liveness:
    get:
      tags:
      - Application Observability
      operationId: getLiveness
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /check/readiness:
    get:
      tags:
      - Application Observability
      operationId: getReadiness
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /check/startup:
    get:
      tags:
      - Application Observability
      operationId: getStartup
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /assets:
    get:
      tags:
      - Asset
      operationId: getAllAssets
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetDto'
    post:
      tags:
      - Asset
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetEntryDto'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /assets/{id}:
    get:
      tags:
      - Asset
      operationId: getAsset
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDto'
    delete:
      tags:
      - Asset
      operationId: removeAsset
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /contractdefinitions:
    get:
      tags:
      - Contract Definition
      operationId: getAllContractDefinitions
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractDefinitionDto'
    post:
      tags:
      - Contract Definition
      operationId: createContractDefinition
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ContractDefinitionDto'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /contractdefinitions/{id}:
    get:
      tags:
      - Contract Definition
      operationId: getContractDefinition
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDefinitionDto'
    delete:
      tags:
      - Contract Definition
      operationId: deleteContractDefinition
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /instances:
    get:
      tags:
      - Dataplane Selector
      operationId: getAll
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataPlaneInstance'
    post:
      tags:
      - Dataplane Selector
      operationId: addEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneInstance'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /instances/select:
    post:
      tags:
      - Dataplane Selector
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataPlaneInstance'
  /transferprocess:
    get:
      tags:
      - Transfer Process
      operationId: getAllTransferProcesses
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferProcessDto'
    post:
      tags:
      - Transfer Process
      operationId: initiateTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferId'
  /transferprocess/{id}:
    get:
      tags:
      - Transfer Process
      operationId: getTransferProcess
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferProcessDto'
  /transferprocess/{id}/cancel:
    post:
      tags:
      - Transfer Process
      operationId: cancelTransferProcess
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /transferprocess/{id}/deprovision:
    post:
      tags:
      - Transfer Process
      operationId: deprovisionTransferProcess
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /transferprocess/{id}/state:
    get:
      tags:
      - Transfer Process
      operationId: getTransferProcessState
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferState'
  /catalog:
    get:
      tags:
      - Catalog
      operationId: getCatalog
      parameters:
      - name: providerUrl
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: Gets contract offers (=catalog) of a single connector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
  /contractagreements:
    get:
      tags:
      - Contract Agreement
      operationId: getAllAgreements
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractAgreementDto'
  /contractagreements/{id}:
    get:
      tags:
      - Contract Agreement
      operationId: getContractAgreement
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractAgreementDto'
  /contractnegotiations:
    get:
      tags:
      - Contract Negotiation
      operationId: getNegotiations
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractNegotiationDto'
    post:
      tags:
      - Contract Negotiation
      operationId: initiateContractNegotiation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NegotiationInitiateRequestDto'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationId'
  /contractnegotiations/{id}:
    get:
      tags:
      - Contract Negotiation
      operationId: getNegotiation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractNegotiationDto'
  /contractnegotiations/{id}/agreement:
    get:
      tags:
      - Contract Negotiation
      operationId: getAgreementForNegotiation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractAgreementDto'
  /contractnegotiations/{id}/cancel:
    post:
      tags:
      - Contract Negotiation
      operationId: cancelNegotiation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /contractnegotiations/{id}/decline:
    post:
      tags:
      - Contract Negotiation
      operationId: declineNegotiation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /contractnegotiations/{id}/state:
    get:
      tags:
      - Contract Negotiation
      operationId: getNegotiationState
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationState'
  /federatedcatalog:
    post:
      operationId: getCachedCatalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedCatalogCacheQuery'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractOffer'
  /policydefinitions:
    get:
      tags:
      - Policy
      operationId: getAllPolicies
      parameters:
      - name: offset
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: sortField
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDefinition'
    post:
      tags:
      - Policy
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDefinition'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /policydefinitions/{id}:
    get:
      tags:
      - Policy
      operationId: getPolicy
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDefinition'
    delete:
      tags:
      - Policy
      operationId: deletePolicy
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
components:
  schemas:
    Action:
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
        includedIn:
          type: string
        type:
          type: string
    Asset:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
    AssetDto:
      required:
      - properties
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
    AssetEntryDto:
      required:
      - asset
      - dataAddress
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/AssetDto'
        dataAddress:
          $ref: '#/components/schemas/DataAddressDto'
    Catalog:
      type: object
      properties:
        contractOffers:
          type: array
          items:
            $ref: '#/components/schemas/ContractOffer'
        id:
          type: string
    Constraint:
      required:
      - edctype
      type: object
      properties:
        edctype:
          type: string
      discriminator:
        propertyName: edctype
    ContractAgreementDto:
      required:
      - assetId
      - consumerAgentId
      - id
      - policy
      - providerAgentId
      type: object
      properties:
        assetId:
          type: string
        consumerAgentId:
          type: string
        contractEndDate:
          type: integer
          format: int64
        contractSigningDate:
          type: integer
          format: int64
        contractStartDate:
          type: integer
          format: int64
        id:
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
        providerAgentId:
          type: string
    ContractDefinitionDto:
      required:
      - accessPolicyId
      - contractPolicyId
      - criteria
      - id
      type: object
      properties:
        accessPolicyId:
          type: string
        contractPolicyId:
          type: string
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/Criterion'
        id:
          type: string
    ContractNegotiationDto:
      type: object
      properties:
        contractAgreementId:
          type: string
        counterPartyAddress:
          type: string
        errorDetail:
          type: string
        id:
          type: string
        protocol:
          type: string
        state:
          type: string
        type:
          type: string
          enum:
          - CONSUMER
          - PROVIDER
    ContractOffer:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
        assetId:
          type: string
        consumer:
          type: string
          format: uri
        contractEnd:
          type: string
          format: date-time
        contractStart:
          type: string
          format: date-time
        id:
          type: string
        offerEnd:
          type: string
          format: date-time
        offerStart:
          type: string
          format: date-time
        policy:
          $ref: '#/components/schemas/Policy'
        provider:
          type: string
          format: uri
    ContractOfferDescription:
      required:
      - assetId
      - offerId
      - policy
      type: object
      properties:
        assetId:
          type: string
        offerId:
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
    Criterion:
      type: object
      properties:
        left:
          type: object
        op:
          type: string
        right:
          type: object
    DataAddress:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
    DataAddressDto:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
    DataAddressInformationDto:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
    DataPlaneInstance:
      type: object
      properties:
        id:
          type: string
        lastActive:
          type: integer
          format: int64
        properties:
          type: object
          additionalProperties:
            type: object
        turnCount:
          type: integer
          format: int32
        url:
          type: string
          format: url
    DataRequestDto:
      type: object
      properties:
        assetId:
          type: string
        connectorId:
          type: string
        contractId:
          type: string
    DeprovisionedResource:
      type: object
      properties:
        error:
          type: boolean
        errorMessage:
          type: string
        inProcess:
          type: boolean
        provisionedResourceId:
          type: string
    Duty:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        consequence:
          $ref: '#/components/schemas/Duty'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        parentPermission:
          $ref: '#/components/schemas/Permission'
        target:
          type: string
        uid:
          type: string
    FederatedCatalogCacheQuery:
      type: object
      properties:
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/Criterion'
    NegotiationId:
      type: object
      properties:
        id:
          type: string
    NegotiationInitiateRequestDto:
      required:
      - connectorAddress
      - connectorId
      - offer
      - protocol
      type: object
      properties:
        connectorAddress:
          type: string
        connectorId:
          type: string
        offer:
          $ref: '#/components/schemas/ContractOfferDescription'
        protocol:
          type: string
    NegotiationState:
      type: object
      properties:
        state:
          type: string
    Permission:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        duties:
          type: array
          items:
            $ref: '#/components/schemas/Duty'
        target:
          type: string
        uid:
          type: string
    Policy:
      type: object
      properties:
        '@type':
          type: string
          enum:
          - SET
          - OFFER
          - CONTRACT
        assignee:
          type: string
        assigner:
          type: string
        extensibleProperties:
          type: object
          additionalProperties:
            type: object
        inheritsFrom:
          type: string
        obligations:
          type: array
          items:
            $ref: '#/components/schemas/Duty'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        prohibitions:
          type: array
          items:
            $ref: '#/components/schemas/Prohibition'
        target:
          type: string
    PolicyDefinition:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
        uid:
          type: string
    Prohibition:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/Action'
        assignee:
          type: string
        assigner:
          type: string
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        target:
          type: string
        uid:
          type: string
    ProvisionerWebhookRequest:
      required:
      - assetId
      - contentDataAddress
      - resourceDefinitionId
      - resourceName
      type: object
      properties:
        apiToken:
          type: string
        assetId:
          type: string
        contentDataAddress:
          $ref: '#/components/schemas/DataAddress'
        hasToken:
          type: boolean
        resourceDefinitionId:
          type: string
        resourceName:
          type: string
    SelectionRequest:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/DataAddress'
        source:
          $ref: '#/components/schemas/DataAddress'
        strategy:
          type: string
    TransferId:
      type: object
      properties:
        id:
          type: string
    TransferProcessDto:
      type: object
      properties:
        createdTimestamp:
          type: integer
          format: int64
        dataDestination:
          $ref: '#/components/schemas/DataAddressInformationDto'
        dataRequest:
          $ref: '#/components/schemas/DataRequestDto'
        errorDetail:
          type: string
        id:
          type: string
        state:
          type: string
        stateTimestamp:
          type: integer
          format: int64
        type:
          type: string
    TransferRequestDto:
      required:
      - assetId
      - connectorAddress
      - connectorId
      - contractId
      - dataDestination
      - id
      - protocol
      - transferType
      type: object
      properties:
        assetId:
          type: string
        connectorAddress:
          type: string
        connectorId:
          type: string
        contractId:
          type: string
        dataDestination:
          $ref: '#/components/schemas/DataAddress'
        id:
          type: string
        managedResources:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
        protocol:
          type: string
        transferType:
          $ref: '#/components/schemas/TransferType'
    TransferState:
      type: object
      properties:
        state:
          type: string
    TransferType:
      type: object
      properties:
        contentType:
          type: string
        isFinite:
          type: boolean
